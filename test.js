var laws = require('laws');
var œÉ = require('./lib');

[[ 'monoid'      , 'leftIdentity'  ]
,[ 'monoid'      , 'rightIdentity' ]
,[ 'semigroup'   , 'associativity' ]
,[ 'functor'     , 'identity'      ]
,[ 'functor'     , 'composition'   ]
,[ 'applicative' , 'identity'      ]
,[ 'applicative' , 'composition'   ]
,[ 'applicative' , 'homomorphism'  ]
,[ 'applicative' , 'interchange'   ]
,[ 'chain'       , 'associativity' ]
,[ 'monad'       , 'leftIdentity'  ]
,[ 'monad'       , 'rightIdentity' ]
].map(function(l) {
	var test = laws[l[0]][l[1]](œÉ).asTest({verbose: true});
	return function() {
		console.log(l.join(' '));
		test();
	};
}).forEach(function(t) { t() });

function assert(a) {
	console.assert(a[1](), a[0]);
	console.log('üëç  ' + a[0]);
}

[['take'       , function() { return œÉ('hello world').take(5).equals(œÉ('hello')); }]
,['drop'       , function() { return œÉ('hello world').drop(6).equals(œÉ('world')); }]
,['equals same', function() { return œÉ('hello').equals(œÉ('hello'));               }]
,['equals diff', function() { return !œÉ('hello').equals(œÉ('world'));              }]
,['mkString'   , function() { return œÉ('hello').mkString() === 'hello';           }]
,['takeStr'    , function() { return œÉ(['hello']).takeStr(2).equals(œÉ(['he']))    }]
,['dropStr'    , function() { return œÉ(['hello']).dropStr(2).equals(œÉ(['llo']))   }]
].forEach(assert);
